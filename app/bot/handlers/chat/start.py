from aiogram import types
from aiogram.filters import Command, CommandStart, StateFilter, Text
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from loguru import logger

from bot.handlers.chat.assistant import chat_dialog_handler
from bot.keyboards import get_role_keyboard
from bot.loader import dp, bot
from bot.states import BotState
from loader import bot_core
from models import User


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.
@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.set_state(BotState.ADD_USER)
    await message.delete()

    prompts = await bot_core.get_all_prompt()
    logger.info(f'Get all prompts: {prompts}')
    if len(prompts) == 0:
        await bot_core.create_prompt(name='DEFAULT', description='', prompt='', author='bot')
        logger.info(f'Create default prompt!')
        prompts = await bot_core.get_all_prompt()
    role_keyboard = get_role_keyboard(prompts)

    answer = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.full_name}! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n' \
             f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:\n'
    await message.answer(answer, reply_markup=role_keyboard)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
@dp.callback_query(StateFilter(BotState.ADD_USER))
async def add_user(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BotState.CHAT)
    await callback.message.delete()
    role_name = callback.data
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name

    await bot_core.add_user(user_id, user_name, role_name)

    await callback.answer(text=f'–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —Ä–æ–ª–∏ {role_name} –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É!üé±', show_alert=True)
    await callback.message.answer(f'–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —Ä–æ–ª–∏ {role_name} –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É!üé±')

    commands_list = [types.BotCommand(command='menu', description='–ú–µ–Ω—é –±–æ—Ç–∞.')]
    await bot.set_my_commands(commands_list)
    logger.info('Menu commands assigned.')


@dp.callback_query(Text('help'), StateFilter(BotState.CHAT))
@dp.callback_query(Command('help'), StateFilter(BotState.CHAT))
async def cmd_help(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer()
    await callback.message.answer(
        '–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/menu - –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.\n'
        '/help - –ü–æ–º–æ—â—å!'
    )


@dp.message(StateFilter(None))
async def cmd_go_all(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data: User = await bot_core.user_storage.get_user_data(user_id)

    if user_data:
        role_name = user_data['bot_role']
        await state.set_state(BotState.CHAT)

        await message.answer(f'C –≤–æ–∑—Ä–∞—â–µ–Ω–∏–µ–º {message.from_user.username}.\n'
                             f'–í—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å {role_name}.')

        await chat_dialog_handler(message)

        commands_list = [types.BotCommand(command='menu', description='–ú–µ–Ω—é –±–æ—Ç–∞.')]
        await bot.set_my_commands(commands_list)
        logger.info('Menu commands assigned.')

    else:
        await message.delete()
        await message.answer(f'–ú—ã —Å –≤–∞–º–∏ –Ω–µ –∑–Ω–∞–∫–æ–º—ã {message.from_user.first_name}\n'
                             f' –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.')
